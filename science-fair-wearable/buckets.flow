[
  {
    "id": "4f6a7f33.b45728",
    "type": "tab",
    "label": "Buckets",
    "disabled": false,
    "info": "Kicx Kicks"
  },
  {
    "id": "a70134f4.39ca2",
    "type": "ibmiot in",
    "z": "4f6a7f33.b45728",
    "authentication": "apiKey",
    "apiKey": "574dea7a.a2a9a4",
    "inputType": "evt",
    "logicalInterface": "",
    "ruleId": "",
    "deviceId": "AM1V310_313D48",
    "applicationId": "",
    "deviceType": "+",
    "eventType": "+",
    "commandType": "",
    "format": "json",
    "name": "STD48",
    "service": "registered",
    "allDevices": false,
    "allApplications": false,
    "allDeviceTypes": true,
    "allLogicalInterfaces": false,
    "allEvents": true,
    "allCommands": false,
    "allFormats": false,
    "qos": "0",
    "x": 60,
    "y": 395,
    "wires": [
      [
        "c98b8065.92c108"
      ]
    ]
  },
  {
    "id": "55321941.a5ec98",
    "type": "ui_gauge",
    "z": "4f6a7f33.b45728",
    "name": "Shots Guage",
    "group": "cb53c78b.147338",
    "order": 1,
    "width": 0,
    "height": 0,
    "gtype": "gage",
    "title": "Shots",
    "label": "Shots",
    "format": "{{msg.payload.shots}}",
    "min": 0,
    "max": "30",
    "colors": [
      "#ff2600",
      "#e6e600",
      "#00fa00"
    ],
    "seg1": "10",
    "seg2": "20",
    "x": 765,
    "y": 555,
    "wires": []
  },
  {
    "id": "8d0549e4.aac1b8",
    "type": "ui_gauge",
    "z": "4f6a7f33.b45728",
    "name": "Steps Dial",
    "group": "3c6b7dd9.e50efa",
    "order": 1,
    "width": 0,
    "height": 0,
    "gtype": "gage",
    "title": "Steps",
    "label": "Steps",
    "format": "{{msg.payload.steps}}",
    "min": 0,
    "max": "1000",
    "colors": [
      "#ff2600",
      "#e6e600",
      "#00fa00"
    ],
    "seg1": "250",
    "seg2": "600",
    "x": 837,
    "y": 222,
    "wires": []
  },
  {
    "id": "c98b8065.92c108",
    "type": "switch",
    "z": "4f6a7f33.b45728",
    "name": "SensorTile Event Types",
    "property": "eventType",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "Accelerometer",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "Gyroscope",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 270,
    "y": 395,
    "wires": [
      [
        "e14cdcd9.e7ee48",
        "ba83e490.5dce7",
        "bd5a8048.37119"
      ],
      [
        "3a99298c.0271f6",
        "af75e801.9e101",
        "bbc8cc7c.5ea948"
      ]
    ]
  },
  {
    "id": "e14cdcd9.e7ee48",
    "type": "change",
    "z": "4f6a7f33.b45728",
    "name": "Extract Accelerometer X",
    "rules": [
      {
        "t": "set",
        "p": "payload.AX",
        "pt": "msg",
        "to": "payload.d.X",
        "tot": "msg"
      },
      {
        "t": "set",
        "p": "topic",
        "pt": "msg",
        "to": "AX",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 290,
    "y": 205,
    "wires": [
      [
        "10284ab3.c3bb85",
        "cf4524c4.3ee79"
      ]
    ]
  },
  {
    "id": "ba83e490.5dce7",
    "type": "change",
    "z": "4f6a7f33.b45728",
    "name": "Extract Accelerometer Y",
    "rules": [
      {
        "t": "set",
        "p": "payload.AY",
        "pt": "msg",
        "to": "payload.d.Y",
        "tot": "msg"
      },
      {
        "t": "set",
        "p": "topic",
        "pt": "msg",
        "to": "AY",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 285,
    "y": 245,
    "wires": [
      [
        "10284ab3.c3bb85"
      ]
    ]
  },
  {
    "id": "bd5a8048.37119",
    "type": "change",
    "z": "4f6a7f33.b45728",
    "name": "Extract Accelerometer Z",
    "rules": [
      {
        "t": "set",
        "p": "payload.AZ",
        "pt": "msg",
        "to": "payload.d.Z",
        "tot": "msg"
      },
      {
        "t": "set",
        "p": "topic",
        "pt": "msg",
        "to": "AZ",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 285,
    "y": 285,
    "wires": [
      [
        "10284ab3.c3bb85",
        "e760517.d3fc63"
      ]
    ]
  },
  {
    "id": "3a99298c.0271f6",
    "type": "change",
    "z": "4f6a7f33.b45728",
    "name": "Extract Gyroscope X",
    "rules": [
      {
        "t": "set",
        "p": "payload.GX",
        "pt": "msg",
        "to": "payload.d.X",
        "tot": "msg"
      },
      {
        "t": "set",
        "p": "topic",
        "pt": "msg",
        "to": "GX",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 280,
    "y": 490,
    "wires": [
      [
        "10284ab3.c3bb85"
      ]
    ]
  },
  {
    "id": "af75e801.9e101",
    "type": "change",
    "z": "4f6a7f33.b45728",
    "name": "Extract Gyroscope Y",
    "rules": [
      {
        "t": "set",
        "p": "payload.GY",
        "pt": "msg",
        "to": "payload.d.Y",
        "tot": "msg"
      },
      {
        "t": "set",
        "p": "topic",
        "pt": "msg",
        "to": "GY",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 280,
    "y": 530,
    "wires": [
      [
        "10284ab3.c3bb85",
        "ec3fe379.c75c08",
        "fa63b738.eacab"
      ]
    ]
  },
  {
    "id": "bbc8cc7c.5ea948",
    "type": "change",
    "z": "4f6a7f33.b45728",
    "name": "Extract Gyroscope Z",
    "rules": [
      {
        "t": "set",
        "p": "payload.GZ",
        "pt": "msg",
        "to": "payload.d.Z",
        "tot": "msg"
      },
      {
        "t": "set",
        "p": "topic",
        "pt": "msg",
        "to": "GZ",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 280,
    "y": 570,
    "wires": [
      [
        "10284ab3.c3bb85"
      ]
    ]
  },
  {
    "id": "c132a0d0.3ddca",
    "type": "debug",
    "z": "4f6a7f33.b45728",
    "name": "Data",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 675,
    "y": 445,
    "wires": []
  },
  {
    "id": "10284ab3.c3bb85",
    "type": "delay",
    "z": "4f6a7f33.b45728",
    "name": "",
    "pauseType": "timed",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": true,
    "x": 560,
    "y": 395,
    "wires": [
      [
        "c132a0d0.3ddca"
      ]
    ]
  },
  {
    "id": "48cd150a.e73e8c",
    "type": "debug",
    "z": "4f6a7f33.b45728",
    "name": "Shots",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 760,
    "y": 510,
    "wires": []
  },
  {
    "id": "ec3fe379.c75c08",
    "type": "function",
    "z": "4f6a7f33.b45728",
    "name": "WindowCountShots",
    "func": "// determines the average of all payload values passed in \n// over the specified time range\n// https://discourse.nodered.org/t/nodes-suggestion-for-timed-rolling-average-and-desynchronised-sum/4933\nconst range = 20;   // window time millisecs\nlet buffer = context.get('buffer') || [];\nlet shots = context.get('shots') || 0;   // the accumulated total so far\n//use the gyroscope Y values\nlet value = Number(msg.payload.GY);\n// remove any samples that are too old\nwhile (buffer.length >= range-1) \n{\n    // remove oldest sample from array and total\n    //node.warn(`removing oldest ${buffer[0].value}`);\n    buffer.shift();\n}\n// add the new sample to the end\nbuffer.push({value: value});\ncontext.set('buffer', buffer);\n\nif (buffer.length > 10)//looks at a full second of data\n{\n    var min = 5000;\n    var max = -5000;\n    for (i = 0; i < buffer.length; i++)\n    {\n        if (buffer[i].value < min)//for all the data in the half-second, the max and min value are initzialized\n        {\n            min = buffer[i].value;\n        }\n        if (buffer[i].value > max)\n        {\n            max = buffer[i].value;\n        }\n    }\n    if (min < -100 && max > 325)//if the min and max in within the thresholds, it counts as a shot\n    {\n        shots++;\n        context.set('buffer', []);\n        \n    }\n    if (min < -50 && max > 100) \n    {\n        node.warn(`length: ${buffer.length}, min: ${min}, max: ${max}, shots: ${shots}`);//prints out the data values in the display\n    }\n}\n//record steps in context\ncontext.set('shots', shots);\n\nmsg.payload.shots = context.get('shots');\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 546,
    "y": 524,
    "wires": [
      [
        "55321941.a5ec98",
        "48cd150a.e73e8c",
        "68dbfb54.4a3d04"
      ]
    ]
  },
  {
    "id": "cf4524c4.3ee79",
    "type": "function",
    "z": "4f6a7f33.b45728",
    "name": "WindowCountDribbles",
    "func": "// over the specified time range\nconst range = 20;   // 2 second window time \nlet buffer = context.get('buffer') || [];\nlet dribbles = context.get('dribbles') || 0;   // the accumulated total so far\n\n//use accelerometer X values\nlet value = Number(msg.payload.AX);\n// remove any samples that are too old\nwhile (buffer.length >= range-1) \n{\n    // remove oldest sample from array\n    //node.warn(`removing oldest ${buffer[0].value}`);\n    buffer.shift();\n}\n// add the new sample to the end\nbuffer.push({value: value});\ncontext.set('buffer', buffer);\n\nif (buffer.length > 5)//This looks at every half second of data\n{\n    //find largest amplitude seen every half-second\n    var min = 5000;\n    var max = -5000;\n    var doublexamplitude = 0;\n    for (var i = 0; i < 5; i++)//for all the data in the half-second, the max and min value are initzialized\n    {\n        if (buffer[i].value < min)\n        {\n            min = buffer[i].value;\n        }\n        if (buffer[i].value > max)\n        {\n            max = buffer[i].value;\n        }\n    }\n    //amplitude\n    doublexamplitude = max - min;\n    //if the amplitude of the return data is within threshold, it counts an a dribble\n    if (doublexamplitude > 625 && doublexamplitude <= 3200)\n    {\n        dribbles++;\n        //once a dribble is seen, window is cleared out\n        for (i = 0; i < 5; i++)\n        {\n            buffer.shift();           \n        }\n        context.set('buffer', buffer);\n    }\n    //easy to debug print values of the amplitude is over 500\n    if (doublexamplitude > 500) \n    {\n        node.warn(`length: ${buffer.length}, min: ${min}, max: ${max}, da: ${doublexamplitude}, dribbles: ${dribbles}`);\n    }\n}\n\n//record dribbles in context\ncontext.set('dribbles', dribbles);\nmsg.payload.dribbles = context.get('dribbles');\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 575,
    "y": 130,
    "wires": [
      [
        "ef76726a.bd0a98",
        "f07eaebd.1f01a",
        "68dbfb54.4a3d04"
      ]
    ]
  },
  {
    "id": "f07eaebd.1f01a",
    "type": "debug",
    "z": "4f6a7f33.b45728",
    "name": "Dribbles",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 840,
    "y": 130,
    "wires": []
  },
  {
    "id": "e760517.d3fc63",
    "type": "function",
    "z": "4f6a7f33.b45728",
    "name": "WindowCountSteps",
    "func": "// determines the average of all payload values passed in \n// over the specified time range\nconst range = 20;   // window time millisecs\nlet buffer = context.get('buffer') || [];\nlet steps = context.get('steps') || 0;   // the accumulated total so far\n//use the Accelerometer Z values\nlet value = Number(msg.payload.AZ);\n// remove any samples that are too old\nwhile (buffer.length >= range-1) \n{\n    // remove oldest sample from array and total\n    //node.warn(`removing oldest ${buffer[0].value}`);\n    buffer.shift();\n}\n// add the new sample to the end\nbuffer.push({value: value});\ncontext.set('buffer', buffer);\n\nif (buffer.length > 5)//counts data within a half-second\n{\n    //find largest amplitude seen every half-second\n    var min = 5000;//hypothetical min\n    var max = -5000;//hypothetical max\n    var doublexamplitude = 0;\n    for (var i = 0; i < buffer.length; i++)//for all the data in the half-second, the max and min value are initzialized\n    {\n        if (buffer[i].value < min)\n        {\n            min = buffer[i].value;\n        }\n        if (buffer[i].value > max)\n        {\n            max = buffer[i].value;\n        }\n    }\n    //amplitude\n    doublexamplitude = max - min;\n    if (doublexamplitude > 1800 && doublexamplitude <= 3900)\n    //if the amplitude of the return data is within threshold, it counts an a step\n    {\n        steps++;\n        steps++;//two steps count as one because sensor is only on one hand so you must account for the other hand\n        for (i = 0; i < 5; i++)//once all the samples are in the window, the window shifts over to get new samples\n        {\n            buffer.shift();\n        }\n        context.set('buffer', buffer);\n    }\n    if (doublexamplitude > 1500) \n    {//it will only print values of the amplitude is over 1500 \n        node.warn(`length: ${buffer.length}, min: ${min}, max: ${max}, da: ${doublexamplitude}, steps: ${steps}`);\n    }\n}\n//record steps in context\ncontext.set('steps', steps);\nmsg.payload.steps = context.get('steps');\nmsg.payload.distance = msg.payload.steps/1000;//There's 100 steps in a mile while sprinting, so to convert you must divide the steps by 1000\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 555,
    "y": 225,
    "wires": [
      [
        "8d0549e4.aac1b8",
        "da121ea9.70de9",
        "7dee8db9.c0aedc",
        "68dbfb54.4a3d04"
      ]
    ]
  },
  {
    "id": "fa63b738.eacab",
    "type": "function",
    "z": "4f6a7f33.b45728",
    "name": "ThresholdCountShots",
    "func": "var shots = global.get(\"shots\")||0;\nglobal.set('shots', shots);\nvar gy = msg.payload.GY ////get the gyro value\nif (gy > 600) {\n    shots++;   \n    global.set('shots', shots);\n}\nmsg.payload.shots = shots;//update payload.sprint for the next node!\nreturn msg;//return msg with all the original stuff + the updated sprint value",
    "outputs": 1,
    "noerr": 0,
    "x": 544,
    "y": 608,
    "wires": [
      []
    ]
  },
  {
    "id": "ef76726a.bd0a98",
    "type": "ui_gauge",
    "z": "4f6a7f33.b45728",
    "name": "Dribbles Dial",
    "group": "cb53c78b.147338",
    "order": 3,
    "width": 0,
    "height": 0,
    "gtype": "donut",
    "title": "Dribbles",
    "label": "Dribbles",
    "format": "{{msg.payload.dribbles}}",
    "min": 0,
    "max": "50",
    "colors": [
      "#ff2600",
      "#e6e600",
      "#00fa00"
    ],
    "seg1": "15",
    "seg2": "30",
    "x": 847,
    "y": 169,
    "wires": []
  },
  {
    "id": "da121ea9.70de9",
    "type": "ui_gauge",
    "z": "4f6a7f33.b45728",
    "name": "Distance Dial",
    "group": "3c6b7dd9.e50efa",
    "order": 3,
    "width": 0,
    "height": 0,
    "gtype": "donut",
    "title": "Distance",
    "label": "miles",
    "format": "{{msg.payload.distance}}",
    "min": 0,
    "max": "1",
    "colors": [
      "#00b500",
      "#e6e600",
      "#ca3838"
    ],
    "seg1": ".25",
    "seg2": ".6",
    "x": 832,
    "y": 292,
    "wires": []
  },
  {
    "id": "7dee8db9.c0aedc",
    "type": "debug",
    "z": "4f6a7f33.b45728",
    "name": "Steps",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 817,
    "y": 257,
    "wires": []
  },
  {
    "id": "de59939b.4da8e8",
    "type": "comment",
    "z": "4f6a7f33.b45728",
    "name": "Watson Cloud IOT Device",
    "info": "To automatically send data:\n1. Change *Repeat* to interval.\n2. Click Deploy button.\n",
    "x": 115,
    "y": 40,
    "wires": []
  },
  {
    "id": "89d4b86e.856218",
    "type": "comment",
    "z": "4f6a7f33.b45728",
    "name": "Separate Out Sensor Data",
    "info": "To automatically send data:\n1. Change *Repeat* to interval.\n2. Click Deploy button.\n",
    "x": 285,
    "y": 95,
    "wires": []
  },
  {
    "id": "8b474b02.8f9cd",
    "type": "comment",
    "z": "4f6a7f33.b45728",
    "name": "Accelerometer Data",
    "info": "To automatically send data:\n1. Change *Repeat* to interval.\n2. Click Deploy button.\n",
    "x": 277,
    "y": 161,
    "wires": []
  },
  {
    "id": "7cef0777.1378b",
    "type": "comment",
    "z": "4f6a7f33.b45728",
    "name": "Gyroscope Data",
    "info": "To automatically send data:\n1. Change *Repeat* to interval.\n2. Click Deploy button.\n",
    "x": 255,
    "y": 610,
    "wires": []
  },
  {
    "id": "3061dafa.ed63e6",
    "type": "comment",
    "z": "4f6a7f33.b45728",
    "name": "Analyze X for Dribbles",
    "info": "To automatically send data:\n1. Change *Repeat* to interval.\n2. Click Deploy button.\n",
    "x": 580,
    "y": 85,
    "wires": []
  },
  {
    "id": "6a31631d.46af34",
    "type": "comment",
    "z": "4f6a7f33.b45728",
    "name": "Analyze Z for Steps",
    "info": "To automatically send data:\n1. Change *Repeat* to interval.\n2. Click Deploy button.\n",
    "x": 550,
    "y": 185,
    "wires": []
  },
  {
    "id": "9b70f51c.63bab8",
    "type": "comment",
    "z": "4f6a7f33.b45728",
    "name": "Analyze Y for Shots",
    "info": "To automatically send data:\n1. Change *Repeat* to interval.\n2. Click Deploy button.\n",
    "x": 541,
    "y": 487,
    "wires": []
  },
  {
    "id": "55a1f7ae.98d298",
    "type": "comment",
    "z": "4f6a7f33.b45728",
    "name": "Dashboard",
    "info": "To automatically send data:\n1. Change *Repeat* to interval.\n2. Click Deploy button.\n",
    "x": 780,
    "y": 32,
    "wires": []
  },
  {
    "id": "269f28fd.fb475",
    "type": "rbe",
    "z": "4f6a7f33.b45728",
    "name": "Done",
    "func": "deadbandEq",
    "gap": "1",
    "start": "",
    "inout": "in",
    "property": "payload.done",
    "x": 890,
    "y": 435,
    "wires": [
      [
        "abb01c3f.92b34"
      ]
    ]
  },
  {
    "id": "abb01c3f.92b34",
    "type": "ui_toast",
    "z": "4f6a7f33.b45728",
    "position": "dialog",
    "displayTime": "60",
    "highlight": "",
    "sendall": true,
    "outputs": 1,
    "ok": "OK",
    "cancel": "",
    "topic": "Workout is now complete!",
    "name": "Workout Complete",
    "x": 950,
    "y": 485,
    "wires": [
      []
    ]
  },
  {
    "id": "68dbfb54.4a3d04",
    "type": "join",
    "z": "4f6a7f33.b45728",
    "name": "Merge Stats",
    "mode": "custom",
    "build": "merged",
    "property": "payload",
    "propertyType": "msg",
    "key": "topic",
    "joiner": "\\n",
    "joinerType": "str",
    "accumulate": true,
    "timeout": "",
    "count": "1",
    "reduceRight": false,
    "reduceExp": "",
    "reduceInit": "",
    "reduceInitType": "num",
    "reduceFixup": "",
    "x": 825,
    "y": 335,
    "wires": [
      [
        "7a7a70d7.7c645"
      ]
    ]
  },
  {
    "id": "7a7a70d7.7c645",
    "type": "function",
    "z": "4f6a7f33.b45728",
    "name": "Workout Complete",
    "func": "if (msg.payload.shots >= 30 && msg.payload.steps >= 1000 && msg.payload.dribbles >= 50)\n{\n    msg.payload.done = 1;\n    // node.warn(`workout complete`)\n}\nelse\n{\n    // node.warn(`shots: ${msg.payload.shots}, dribbles: ${msg.payload.dribbles}, steps: ${msg.payload.steps}`)\n    msg.payload.done = 0;    \n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 880,
    "y": 380,
    "wires": [
      [
        "269f28fd.fb475"
      ]
    ]
  },
  {
    "id": "574dea7a.a2a9a4",
    "type": "ibmiot",
    "z": "",
    "name": "SensortileD48",
    "keepalive": "60",
    "serverName": "",
    "cleansession": true,
    "appId": "",
    "shared": false
  },
  {
    "id": "cb53c78b.147338",
    "type": "ui_group",
    "z": "",
    "name": "Skills",
    "tab": "9119d925.f4cea8",
    "order": 2,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "3c6b7dd9.e50efa",
    "type": "ui_group",
    "z": "",
    "name": "Conditioning",
    "tab": "9119d925.f4cea8",
    "order": 1,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "9119d925.f4cea8",
    "type": "ui_tab",
    "z": "",
    "name": "Buckets",
    "icon": "dashboard",
    "order": 4,
    "disabled": false,
    "hidden": false
  }
]